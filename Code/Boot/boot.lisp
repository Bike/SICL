(cl:in-package #:sicl-boot)

(defun boot ()
  (let ((boot (make-instance 'boot
                :e0 (setf *e0* (make-instance 'environment))
                :e1 (setf *e1* (make-instance 'environment))
                :e2 (setf *e2* (make-instance 'environment))
                :e3 (setf *e3* (make-instance 'environment))
                :e4 (setf *e4* (make-instance 'environment))
                :e5 (setf *e5* (make-instance 'environment))
                :e6 (setf *e6* (make-instance 'environment))
                :e7 (setf *e7* (make-instance 'environment)))))
    (loop for env in (list *e1* *e2* *e3* *e4* *e5* *e6* *e7*)
          do (import-functions-from-host '(format break) env)
             (setf (sicl-genv:special-variable '*trace-output* env t)
                   *trace-output*))
    (loop for env in (list *e2* *e3* *e4* *e5*)
          do (define-load-fasl-1 env))
    (loop for (env1 env2) on (list *e4* *e5* *e6* *e7*)
          until (null env2)
          do (define-load-fasl-2 env1 env2))
    (sicl-boot-phase-0:boot boot)
    (sicl-boot-phase-1:boot boot)
    (sicl-boot-phase-2:boot boot)
    (sicl-boot-phase-3:boot boot)
    (sicl-boot-phase-4:boot boot)
    (sicl-boot-phase-5:boot boot)
    (sicl-boot-phase-6:boot boot)
    (sicl-boot-phase-7:boot boot)
    boot))
