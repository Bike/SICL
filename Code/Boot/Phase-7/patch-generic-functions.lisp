(cl:in-package #:sicl-boot-phase-7)

(defun find-generic-functions (e3 e5)
  (let ((ht (make-hash-table :test #'eq))
        (result '())
        (generic-function-class-e3
          (sicl-genv:find-class 'standard-generic-function e3)))
    (do-all-symbols (var)
      (unless (gethash var ht)
        (setf (gethash var ht) t)
        (when (sicl-genv:fboundp var e5)
          (let ((fun (sicl-genv:fdefinition var e5)))
            (when (and (typep fun 'sicl-boot::header)
                       (eq (slot-value fun 'sicl-boot::%class)
                           generic-function-class-e3))
              (push fun result))))
        (when (sicl-genv:fboundp `(setf ,var) e5)
          (let ((fun (sicl-genv:fdefinition `(setf ,var) e5)))
            (when (and (typep fun 'sicl-boot::header)
                       (eq (slot-value fun 'sicl-boot::%class)
                           generic-function-class-e3))
              (push fun result))))))
    result))
