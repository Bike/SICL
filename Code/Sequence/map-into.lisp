(cl:in-package #:sicl-sequence)

(defmethod map-into ((list list) function &rest sequences)
  (let ((function (function-designator-function function))
        (rest list))
    (flet ((fn (&rest arguments)
             (when (endp rest)
               (return-from map-into list))
             (setf (car rest)
                   (apply function arguments))
             (pop rest)))
      (declare (dynamic-extent #'fn))
      (apply #'map-for-effect #'fn sequences)
      list)))

(replicate-for-each-vector-class #1=#:vector-class
  (defmethod map-into ((vector #1#) function &rest sequences)
    (when (array-has-fill-pointer-p vector)
      (setf (fill-pointer vector)
            (array-total-size vector)))
    (let ((function (function-designator-function function))
          (index 0))
      (declare (vector-length index))
      (flet ((fn (&rest arguments)
               (unless (array-in-bounds-p vector index)
                 (return-from map-into vector))
               (setf (elt vector index)
                     (apply function arguments))
               (incf index)))
        (declare (dynamic-extent #'fn))
        (apply #'map-for-effect #'fn sequences))
      (when (array-has-fill-pointer-p vector)
        (setf (fill-pointer vector) index))
      vector)))
