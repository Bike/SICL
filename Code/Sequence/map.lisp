(cl:in-package #:sicl-sequence)

(defun map (result-type function sequence &rest more-sequences)
  (if (null result-type)
      (apply #'map-for-effect function sequence more-sequences)
      (with-reified-result-type (prototype result-type)
        (if (listp prototype)
            (sicl-utilities:with-collectors ((result collect))
              (let ((function (function-designator-function function)))
                (flet ((fn (&rest arguments)
                         (collect (apply function arguments))))
                  (declare (dynamic-extent #'fn))
                  (apply #'map-for-effect #'fn sequence more-sequences))))
            (let ((length 0))
              (declare (array-length length))
              (flet ((count (&rest args)
                       (declare (ignore args))
                       (incf length)))
                (declare (dynamic-extent #'count))
                (apply #'map-for-effect #'count sequence more-sequences))
              (apply
               #'map-into
               (make-sequence-like prototype length)
               function sequence more-sequences))))))
