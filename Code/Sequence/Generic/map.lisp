(cl:in-package #:sicl-sequence)

(defun map (result-type function sequence &rest more-sequences)
  (if (null result-type)
      (apply #'map-for-effect function sequence more-sequences)
      (multiple-value-bind (prototype length-constraint)
          (reify-sequence-type-specifier result-type)
        (let ((result
                (if (listp prototype)
                    (sicl-utilities:with-collectors ((result collect))
                      (let ((function (function-designator-function function)))
                        (flet ((fn (&rest arguments)
                                 (collect (apply function arguments))))
                          (declare (dynamic-extent #'fn))
                          (apply #'map-for-effect #'fn sequence more-sequences))))
                    (let ((length 0))
                      (declare (array-length length))
                      (flet ((count (&rest args)
                               (declare (ignore args))
                               (incf length)))
                        (declare (dynamic-extent #'count))
                        (apply #'map-for-effect #'count sequence more-sequences))
                      (apply
                       #'map-into
                       (make-sequence-like prototype length)
                       function sequence more-sequences)))))
          (unless (or (not length-constraint)
                      (and (integerp length-constraint)
                           (= (length result) length-constraint))
                      (typep result result-type))
            (error "Failed to map the ~R sequences~@
                    ~{ ~S~%~}into a sequence of type ~S."
                   (1+ (length more-sequences))
                   (list* sequence more-sequences)
                   result-type))
          result))))
