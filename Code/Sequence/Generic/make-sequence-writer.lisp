(cl:in-package #:sicl-sequence)

(defmethod make-sequence-writer ((list list) start end from-end terminate)
  (declare (method-properties inlineable))
  (declare (function terminate))
  (multiple-value-bind (start end)
      (canonicalize-start-and-end list start end)
    (values
     (if (not from-end)
         ;; Forward iteration.
         (let ((current (skip-to-start list start))
               (index start))
           (declare (array-length index))
           (lambda (new-value)
             (if (= index end)
                 (funcall terminate)
                 (prog1 (shiftf (car current) new-value)
                   (pop current)
                   (incf index)))))
         ;; Backward iteration.
         (let* ((index (1- end))
                (current '()))
           (declare (array-index index))
           (loop repeat (- end start)
                 for element in (skip-to-start list start)
                 do (push element current))
           (lambda (new-value)
             (if (= index start)
                 (funcall terminate)
                 (prog1 (shiftf (car current) new-value)
                   (pop current)
                   (decf index))))))
     (- end start))))

(seal-domain #'make-sequence-writer '(list t t t t))

(replicate-for-each-vector-class #1=#:vector-class
  (defmethod make-sequence-writer ((vector #1#) start end from-end terminate)
    (declare (method-properties inlineable))
    (declare (function terminate))
    (declare (type #1# vector))
    (multiple-value-bind (start end)
        (canonicalize-start-and-end vector start end)
      (values
       (if (not from-end)
           ;; Forward iteration.
           (let ((index start))
             (declare (array-length index))
             (lambda (new-value)
               (if (= index end)
                   (funcall terminate)
                   (prog1 (shiftf (elt vector index) new-value)
                     (incf index)))))
           ;; Backward iteration.
           (let ((index (1- end)))
             (declare (array-index index))
             (lambda (new-value)
               (if (= index start)
                   (funcall terminate)
                   (prog1 (shiftf (elt vector index) new-value)
                     (decf index))))))
       (- end start)))))

(seal-domain #'make-sequence-writer '(vector t t t t))
