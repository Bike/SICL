(cl:in-package #:sicl-sequence)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; List Deletion

(declaim (inline delete-in-list/from-start))
(defun delete-in-list/from-start (predicate list start end count)
  (let* ((count (canonicalize-count count))
         (head (cons nil nil))
         (tail head))
    (declare (cons head tail) (dynamic-extent head))
    (for-each-relevant-cons (cons index list start end nil)
      (cond ((zerop count)
             (setf (cdr tail) cons)
             (return-from delete-in-list/from-start (cdr head)))
            ((not (funcall predicate (car cons)))
             (setf (cdr tail) cons)
             (setf tail cons))
            (t (decf count))))
    (cdr head)))

(declaim (inline delete-in-list/from-end))
(defun delete-in-list/from-end (predicate list start end count)
  (let ((count (canonicalize-count count))
        (tail nil))
    (declare (fixnum count))
    (for-each-relevant-cons (cons index list start end t)
      (cond ((zerop count)
             (setf (cdr cons) tail)
             (return-from delete-in-list/from-end list))
            ((not (funcall predicate (car cons)))
             (setf (cdr cons) tail)
             (setf tail cons))
            (t (decf count))))
    tail))

(declaim (inline delete-in-list))
(defun delete-in-list (predicate list from-end start end count)
  (if (not from-end)
      (delete-in-list/from-start predicate list start end count)
      (delete-in-list/from-end predicate list start end count)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Vector Deletion

(declaim (inline delete-in-vector/from-start))
(defun delete-in-vector/from-start (predicate vector start end count)
  (let ((count (canonicalize-count count))
        (length (length vector)))
    (multiple-value-bind (start end)
        (canonicalize-start-and-end vector length start end)
      (do ((index start (1+ index))
           (new-end start)
           (deleted 0))
          ((or (= index end)
               (= deleted count))
           (if (zerop deleted)
               vector
               (do ((index index (1+ index))
                    (new-end new-end (1+ new-end)))
                   ((= index length)
                    (shrink-vector vector new-end))
                 (setf (elt vector new-end)
                       (elt vector index)))))
        (let ((element (elt vector index)))
          (cond ((funcall predicate element)
                 (incf deleted))
                (t
                 (setf (elt vector new-end) element)
                 (incf new-end))))))))

(declaim (inline delete-in-vector/from-end))
(defun delete-in-vector/from-end (predicate vector start end count)
  (let ((count (canonicalize-count count))
        (length (length vector)))
    (multiple-value-bind (start end)
        (canonicalize-start-and-end vector length start end)
      (do ((index (1- end) (1- index))
           (new-start end)
           (deleted 0))
          ((or (= index (1- start))
               (= deleted count))
           (cond ((zerop deleted)
                  vector)
                 ((= start (- new-start deleted))
                  (subseq vector new-start))
                 (t
                  (let ((result (make-sequence-like vector (- length deleted))))
                    (replace result vector :end1 (1+ index))
                    (replace result vector :start1 (1+ index) :start2 new-start)
                    result))))
        (let ((element (elt vector index)))
          (cond ((funcall predicate element)
                 (incf deleted))
                (t
                 (decf new-start)
                 (setf (elt vector new-start) element))))))))

(declaim (inline delete-in-vector))
(defun delete-in-vector (predicate vector from-end start end count)
  (if (not from-end)
      (delete-in-vector/from-start predicate vector start end count)
      (delete-in-vector/from-end predicate vector start end count)))
